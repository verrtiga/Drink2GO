//! gulp-w3c-html-validator v5.1.3 ~~ https://github.com/center-key/gulp-w3c-html-validator ~~ MIT License

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "w3c-html-validator", "plugin-error", "through2"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.htmlValidator = void 0;
    const w3c_html_validator_1 = require("w3c-html-validator");
    const plugin_error_1 = __importDefault(require("plugin-error"));
    const through2_1 = __importDefault(require("through2"));
    const pluginName = 'gulp-w3c-html-validator';
    const htmlValidator = {
        analyzer(options) {
            const validate = (file, _encoding, done) => {
                const handleValidation = (results) => {
                    file.w3cHtmlValidator = results;
                    done(null, file);
                };
                const validatorOptions = Object.assign(Object.assign({}, options), { html: file.contents.toString() });
                if (file.isNull())
                    done(null, file);
                else if (file.isStream())
                    done(new plugin_error_1.default(pluginName, 'Streaming not supported'));
                else
                    w3c_html_validator_1.w3cHtmlValidator.validate(validatorOptions).then(handleValidation);
            };
            return through2_1.default.obj(validate);
        },
        reporter(options) {
            const defaults = { maxMessageLen: null, throwErrors: false };
            const settings = Object.assign(Object.assign({}, defaults), options);
            const report = (file, _encoding, done) => {
                const reporterOptions = { title: file.path, maxMessageLen: settings.maxMessageLen };
                if (file.w3cHtmlValidator)
                    w3c_html_validator_1.w3cHtmlValidator.reporter(file.w3cHtmlValidator, reporterOptions);
                done(null, file);
                if (settings.throwErrors && file.w3cHtmlValidator && !file.w3cHtmlValidator.validates)
                    throw new plugin_error_1.default(pluginName, 'HTML validation failed');
            };
            return through2_1.default.obj(report);
        },
    };
    exports.htmlValidator = htmlValidator;
});
